schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

union AddAdvisorResponse
  @join__type(graph: FINANCIAL)
  @join__unionMember(graph: FINANCIAL, member: "UserForAdvisorNotExistsError")
  @join__unionMember(graph: FINANCIAL, member: "AdvisorAlreadyExistsError")
  @join__unionMember(graph: FINANCIAL, member: "Advisor")
 = UserForAdvisorNotExistsError | AdvisorAlreadyExistsError | Advisor

"""Financial advisor information."""
type Advisor
  @join__type(graph: FINANCIAL)
{
  _id: PyObjectId!
  user: User!
  userId: PyObjectId!
  contactPhoneNumber: String!
}

type AdvisorAlreadyExistsError
  @join__type(graph: FINANCIAL)
{
  user: String!
}

type AdvisorPaginationWindow
  @join__type(graph: FINANCIAL)
{
  """The list of items in this pagination window."""
  items: [Advisor!]!

  """Total number of items in the filtered dataset."""
  totalItemsCount: Int!
}

"""Date (isoformat)"""
scalar Date
  @join__type(graph: AUTH)
  @join__type(graph: FINANCIAL)

scalar join__FieldSet

enum join__Graph {
  AUTH @join__graph(name: "auth", url: "http://localhost:8000")
  FINANCIAL @join__graph(name: "financial", url: "http://localhost:8500")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Mutation
  @join__type(graph: FINANCIAL)
{
  addAdvisor(user: String!, contactPhoneNumber: String!): AddAdvisorResponse!
}

scalar PyObjectId
  @join__type(graph: AUTH)
  @join__type(graph: FINANCIAL)

type Query
  @join__type(graph: AUTH)
  @join__type(graph: FINANCIAL)
{
  users: [User!]! @join__field(graph: AUTH)

  """Get a list of advisors."""
  advisors(limit: Int! = 100, offset: Int! = 0): AdvisorPaginationWindow! @join__field(graph: FINANCIAL)
}

"""User register information."""
type User
  @join__type(graph: AUTH)
  @join__type(graph: FINANCIAL)
{
  _id: PyObjectId!
  email: String!
  photoUrl: String!
  firstName: String!
  lastName: String!
  dateOfBirth: Date!
  address: String!
}

type UserForAdvisorNotExistsError
  @join__type(graph: FINANCIAL)
{
  user: String!
}
